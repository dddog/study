<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">


	<!-- Declare a datasource that has pooling capabilities -->
	<!-- 
	acquireIncrement : how many connections will be created at a time when there will be a shortage of connections.
	idleConnectionTestPeriod : after how much delay a connection will be closed if it is no longer in use.
	maxStatements : Max number of SQL statements to be executed on a connection.
	 -->
	<bean id="dataSource" 
		class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close" 
		p:driverClass="${jdbc.driverClassName}"
		p:jdbcUrl="${jdbc.url}" 
		p:user="${jdbc.username}" 
		p:password="${jdbc.password}"
		p:acquireIncrement="10" 
		p:idleConnectionTestPeriod="60" 
		p:maxPoolSize="100"
		p:maxStatements="50" 
		p:minPoolSize="10" />
		
	<context:property-placeholder location="jdbc.properties, mybatis.properties"/>

	<!-- Declare a transaction manager -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		p:dataSource-ref="dataSource" />

	<!-- Enable annotation style of managing transactions -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	<context:component-scan base-package="com.jacademy.y03mybatis">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>

	<!-- define the SqlSessionFactory, notice that configLocation is not needed 
		when you use MapperFactoryBean -->
	<!-- 
	SqlSessionFactoryBean은 스프링의 FactoryBean interface 를 구현하고 있다는것을 알 필요가 있다. 
	이 말은 스프링이 생성하는 빈은 SqlSessionFactoryBean 그자체가 아니며, 
	팩토리가 리턴해주는 객체는 그 팩토리의 getObject()를 호출한 결과 SqlSessionFactory라는 뜻이다.
	-->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<property name="typeAliasesPackage" value="com.jacademy.y03mybatis.domain" />
		<property name="mapperLocations">
			<array>
				<value>classpath*:com/jacademy/y03mybatis/mapper/**/*.xml</value>
			</array>
		</property>
	</bean>
	
	<!-- 스프링이 tx를 대신 처리, commit/rollback 메소드를 명시적으로 호출할 수 없다. -->
	<!-- 
	코드에서 직접 SqlSession 사용하는 경우 인젝트 한다.
	SqlSessionTemplate은 SqlSession을 구현하고 코드에서 SqlSession를 대체하는 역할을 한다.
	SqlSessionTemplate은 SqlSession이 현재의 스프링 트랜잭션에서 사용될수 있도록 보장한다.
	추가적으로 SqlSessionTemplate은 필요한 시점에 세션을 닫고, 커밋하거나 롤백하는 것을 포함한 세션의 생명주기를 관리한다. 
	또한 마이바티스 예외를 스프링의 DataAccessException로 변환하는 작업또한 처리한다.
	 -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
	</bean>

	<!-- scan for mappers and let them be autowired -->
	<!-- 추상메소드를 한 개 이상 갖는 인터페이스만이 대상, 클래스는 대상에서 제외한다. -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.jacademy.y03mybatis" />
	</bean>

</beans>
